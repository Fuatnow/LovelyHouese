{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cyanstyle/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/js/navigation.js","path":"js/navigation.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"source/imgs/exports和module的引用图.png","path":"imgs/exports和module的引用图.png","modified":0,"renderable":0},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/css/images/body.jpg","path":"css/images/body.jpg","modified":0,"renderable":1},{"_id":"source/imgs/exports赋值之后.png","path":"imgs/exports赋值之后.png","modified":0,"renderable":0},{"_id":"source/imgs/exports重新分配内存之后.png","path":"imgs/exports重新分配内存之后.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/cyanstyle/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1467301884060},{"_id":"themes/cyanstyle/_config.yml","hash":"e8ab24788da68f8d590d43d84971d1c3221af652","modified":1467378247758},{"_id":"themes/cyanstyle/LICENSE","hash":"450b2b897f0a46934264ca6467ee4ee9145e6095","modified":1467301884060},{"_id":"themes/cyanstyle/README.md","hash":"f06606ee40b88d11f7750b1ab93cad39271504d3","modified":1467301884060},{"_id":"themes/cyanstyle/package.json","hash":"0e0b80bc8fabfcf44e363fac08d0d34d4ac983b8","modified":1467301884110},{"_id":"source/_posts/exports-js.md","hash":"5607d7483b613e2690a66da4077659e8caded1db","modified":1471689600766},{"_id":"source/_posts/hexo-note.md","hash":"38044b7cf7d3f884ac1f2b9311fecbb117176bd3","modified":1468853023349},{"_id":"source/_posts/javascipt-static-instance-method.md","hash":"102acbb30db60d7a586bffe2f8556deeca83025e","modified":1468851975602},{"_id":"themes/cyanstyle/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1467301883770},{"_id":"themes/cyanstyle/.git/config","hash":"943d5cf6cbeb549bc491bc5392494b52d390914b","modified":1467301883770},{"_id":"source/_posts/lovelyhouese.md","hash":"0c4e0dba3b9360c0e36ee049c436e6e30f42730a","modified":1467301689189},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1467297391258},{"_id":"themes/cyanstyle/.git/COMMIT_EDITMSG","hash":"38170c08cb458fd4879c34b6f608294c50312bbb","modified":1467379245366},{"_id":"themes/cyanstyle/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1467301877129},{"_id":"themes/cyanstyle/.git/packed-refs","hash":"8a9721890355f6cd79e8de434b77109ba488d72c","modified":1467301883763},{"_id":"source/about/index.md","hash":"31346b171ce82d18339a4f06e9c65b05b01bbc94","modified":1467303081262},{"_id":"themes/cyanstyle/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1467301884110},{"_id":"themes/cyanstyle/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1467301884110},{"_id":"themes/cyanstyle/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1467301884110},{"_id":"themes/cyanstyle/layout/layout.ejs","hash":"c6ba9dd8928c46f83e6cb35162505e46de9e1682","modified":1467301884110},{"_id":"themes/cyanstyle/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1467301884110},{"_id":"themes/cyanstyle/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1467301884111},{"_id":"themes/cyanstyle/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1467301884110},{"_id":"themes/cyanstyle/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1467301884110},{"_id":"themes/cyanstyle/.git/index","hash":"1bebc8129d40913b21fae17f12c8be1d28df7ec3","modified":1467379196931},{"_id":"themes/cyanstyle/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1467301877113},{"_id":"themes/cyanstyle/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1467301877111},{"_id":"themes/cyanstyle/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1467301877114},{"_id":"themes/cyanstyle/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1467301877109},{"_id":"themes/cyanstyle/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1467301877116},{"_id":"themes/cyanstyle/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1467301877113},{"_id":"themes/cyanstyle/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1467301877100},{"_id":"themes/cyanstyle/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1467301877112},{"_id":"themes/cyanstyle/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1467301877110},{"_id":"themes/cyanstyle/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1467301877127},{"_id":"themes/cyanstyle/layout/_partial/after-footer.ejs","hash":"3dc581a50c0af3d41127d799b1044ea1d5233542","modified":1467301884061},{"_id":"themes/cyanstyle/layout/_partial/article.ejs","hash":"ad1a3b893858df2610e2eadf1eae5cf45b2b3c37","modified":1467301884061},{"_id":"themes/cyanstyle/layout/_partial/comment.ejs","hash":"ec2761d82e0215da38bfe5940cbba4daffceed0a","modified":1467302438679},{"_id":"themes/cyanstyle/layout/_partial/archive-post.ejs","hash":"663b7c316355ef91634a9bbf7470dcbc14b83f65","modified":1467301884061},{"_id":"themes/cyanstyle/layout/_partial/archive.ejs","hash":"bb0b0b0a729478b0d428fd7d54f37e93d74004ee","modified":1467301884061},{"_id":"themes/cyanstyle/layout/_partial/footer.ejs","hash":"8f21bffe029f5938d5732dafa333fa94771f3ac0","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/head.ejs","hash":"61a6ff99cd7f31dfbe7a925f7664c8f8be6c0803","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/header.ejs","hash":"f1732bca4c5e4a11027cbf300497939507436232","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1467301884065},{"_id":"themes/cyanstyle/.git/logs/HEAD","hash":"3f78066f3a28ff0b331034e0851a96f610a66565","modified":1467379245369},{"_id":"themes/cyanstyle/layout/_partial/sidebar.ejs","hash":"b9295e2d892df9dffec829859b02281667f85cc1","modified":1467301884065},{"_id":"themes/cyanstyle/source/css/style.css","hash":"d6568d25ce8bd84b6ce45b16f628edf97df9a111","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1467301884136},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1467301884136},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1467301884137},{"_id":"themes/cyanstyle/source/js/navigation.js","hash":"1149f4a86285fb1cbf08f3748659368410be6892","modified":1467301884138},{"_id":"themes/cyanstyle/source/js/script.js","hash":"dc57599cf47b6a068f6bbc899aad6fda4576b6ae","modified":1467301884138},{"_id":"themes/cyanstyle/layout/_widget/archive.ejs","hash":"3cb67a156855435ddf50fa6082b34d8e21f7c52b","modified":1467301884110},{"_id":"themes/cyanstyle/layout/_widget/category.ejs","hash":"55377d96929eba1d6ece9cc06b07a34323909092","modified":1467301884110},{"_id":"themes/cyanstyle/layout/_widget/blogroll.ejs","hash":"d1a011e03fcb3c480482824dff82007431c83ef4","modified":1467375306138},{"_id":"themes/cyanstyle/layout/_widget/intro.ejs","hash":"313e7508fcde7d1209298ad6be145853cac3cddf","modified":1467302788376},{"_id":"themes/cyanstyle/layout/_widget/music.ejs","hash":"e931b2059e172f8609899033e7476c861057f67f","modified":1467378420877},{"_id":"themes/cyanstyle/layout/_widget/recent_comments.ejs","hash":"f5b0c3d83822ee0dec211f2c284aa99db344d39c","modified":1467305655663},{"_id":"themes/cyanstyle/layout/_widget/recent_posts.ejs","hash":"ac5682bb66c8fc07e1d1011c93f29c617eab9d34","modified":1467301884110},{"_id":"themes/cyanstyle/layout/_widget/search.ejs","hash":"b5376aed197fcd989e4a413151aba29af845073e","modified":1467301884110},{"_id":"themes/cyanstyle/source/js/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1467301884138},{"_id":"themes/cyanstyle/layout/_widget/tag.ejs","hash":"a62e83cb0214016d2ca2a6e21455e601c8a201eb","modified":1467301884110},{"_id":"themes/cyanstyle/layout/_widget/tagcloud.ejs","hash":"ebe3b3d32fce2e9154d333e859f26ed64748327f","modified":1467301884110},{"_id":"themes/cyanstyle/.git/objects/57/1910753dc5c09a4d9fdcf9721c4b2b57c2a42a","hash":"baf66fb9920bf5527992879a5c3a448f608e10cc","modified":1467379245367},{"_id":"themes/cyanstyle/.git/objects/02/41212b6649d0b94ddeb63d42f4277c13eaea6d","hash":"bed6cb9aeac3cd13b689b901e04dd0f968bd584b","modified":1467379196931},{"_id":"themes/cyanstyle/.git/objects/12/f8cd9335a35151f2e0f74da77686093d2d1834","hash":"d90a02714b8420300f294d8e39c250610d3db539","modified":1467379245366},{"_id":"themes/cyanstyle/.git/objects/26/28deaabafbb6c06ee3206545ea7a46fe50df47","hash":"6e2b39f4c2cacb6b80d295cffc002a11491634dd","modified":1467379245366},{"_id":"themes/cyanstyle/.git/objects/7d/14edc0ec8bc1aa326f241202592b61d4ba6854","hash":"79afc2a60ec0be3697b443d4bdbc9a599f84d803","modified":1467379245366},{"_id":"themes/cyanstyle/.git/objects/58/8b6893f42e2580e2e56bbde3c0ce7e3b4eb571","hash":"9e3d43599c1e8258b5880be850f10da63d9a4721","modified":1467379196914},{"_id":"themes/cyanstyle/.git/objects/b5/356cc0d0d486aaaf1677b4624293e2a5e57d33","hash":"d54d5979ca630aac258386742593713da1d86f3f","modified":1467379196914},{"_id":"themes/cyanstyle/.git/objects/pack/pack-a0d6580122c4e8d9928cd2c8acd2151301a50832.idx","hash":"c09eb0c4f363cb4b90b57a7b0e8036f9dcfa1c84","modified":1467301883720},{"_id":"themes/cyanstyle/.git/objects/bb/9354855eef0da7b2f3ea93a4ce82965d83f1b3","hash":"ef00563ea39acdaefa319647fc88f73f67d4d21a","modified":1467379196897},{"_id":"themes/cyanstyle/.git/refs/heads/master","hash":"a5df47d61eff98419e583c411b89176456e34d63","modified":1467379245367},{"_id":"themes/cyanstyle/.git/objects/e3/a42938c6f70389edd1bcb10ec866071e96ce53","hash":"67a3588f323ea0bc1b6bd3e198e75c15af43a056","modified":1467379245366},{"_id":"themes/cyanstyle/.git/objects/e7/00f25138c8bd38d808259b6e269193311ec9d1","hash":"aad4278902a0fb9e96abaee7b4f20ad25bcff73a","modified":1467379196914},{"_id":"themes/cyanstyle/.git/objects/f8/7e6389ff3829e9777ab05d98b745ccbefbed02","hash":"f6a9fad5d1702e9c5f14de022a5007077511b960","modified":1467379196929},{"_id":"themes/cyanstyle/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1467301884113},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1467301884113},{"_id":"source/imgs/exports和module的引用图.png","hash":"a74db8d489d620b7e53f8143bd81c49f2b18454c","modified":1471686186296},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1467301884136},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1467301884136},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1467301884136},{"_id":"themes/cyanstyle/source/css/images/favicon.ico","hash":"b5b7667c7358e7300c4772d481e556b003716dab","modified":1467301884112},{"_id":"themes/cyanstyle/layout/_partial/post/category.ejs","hash":"8e086ae9864d487d6183ac6e16b92fb35a68639b","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/post/date.ejs","hash":"69785676b6f09a028c75170f3f2d1cb143af9be6","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/post/nav.ejs","hash":"2a7cfa6b3ab280d93ae0b4ba8ae3da9b04c80682","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/post/tag.ejs","hash":"ae103b5970c77299547f269b54d046bcc8f38251","modified":1467301884065},{"_id":"themes/cyanstyle/layout/_partial/post/title.ejs","hash":"97d01c3ff12453d76edf5af31dfed9859b3efc5b","modified":1467301884065},{"_id":"themes/cyanstyle/source/css/images/body.jpg","hash":"92743ba769bb7a7de8e93a418ed36c89e60bc639","modified":1467301884112},{"_id":"themes/cyanstyle/.git/objects/pack/pack-a0d6580122c4e8d9928cd2c8acd2151301a50832.pack","hash":"c28990286fc58030caab06281eba1b5cec35d6ca","modified":1467301883720},{"_id":"themes/cyanstyle/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1467301883769},{"_id":"themes/cyanstyle/.git/logs/refs/heads/master","hash":"3f78066f3a28ff0b331034e0851a96f610a66565","modified":1467379245367},{"_id":"themes/cyanstyle/.git/logs/refs/remotes/origin/HEAD","hash":"cbc5f07afb3db443a6f99be7096b5022bf944d06","modified":1467301883769},{"_id":"source/imgs/exports赋值之后.png","hash":"51f96d4c17850685759152294d2f7abb1747d79b","modified":1471686186306},{"_id":"source/imgs/exports重新分配内存之后.png","hash":"351714cfe7ef2a1d884a5f8c5b9d3542bed32d6e","modified":1471686186319},{"_id":"source/_posts/exports-js1.md","hash":"5607d7483b613e2690a66da4077659e8caded1db","modified":1471689915349},{"_id":"source/_posts/node-js-exprots.md","hash":"54b9b06f3ea3f494cbdf1d5bf3607ce9be547bc3","modified":1471690047355}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2016-06-30T16:08:25.000Z","_content":"\n```\n好男人就是我 \n```\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-01 00:08:25\n---\n\n```\n好男人就是我 \n```\n","updated":"2016-08-20T10:40:00.766Z","path":"about/index.html","_id":"cis3027vb000aksv7f4ktis0b","comments":1,"layout":"page","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">好男人就是我</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">好男人就是我</div></pre></td></tr></table></figure>\n"}],"Post":[{"title":"hexo 搭建小记","date":"2016-06-30T17:19:20.000Z","_content":"#hexo-1\n\n1\\. **安装node**\n\nhero要求node版本大于0.12版本\n\n*[node-v0.12版本列表](http://nodejs.org/dist/latest-v0.12.x/)*\n\n这里选择源码安装:\n\n``` \nwget http://nodejs.org/dist/latest-v0.12.x/node-v0.12.15-linux-x64.tar.xz\n\ntar xvf node-v0.12.15-linux-x64.tar.xz\n\ncd node-v0.12.15/\n\n./configure\n\nmake\n\nmake install\n\n```\n\n添加到环境变量\n\n```\n在PATH后面追加/usr/local/bin/node\n\nvi /etc/profile\n\n使环境变量生效\n\nsource /etc/profile\n\n查看是否在PATH里面\n\necho $PATH\n\nnode -v\n\n显示v0.12.15说明node已经配置成功\n\n```\n\n\n2\\. **安装Hexo3.0**\n\n```\nnpm install hexo-cli -g\n\n```\n\n创建一个存放博客的文件夹\n\n```\nmkdir myblog\n\ncd myblog\n\nhexo 会通过git下载所需要的文件\nhexo init \n\n安装依赖包\nnpm install\n\n生成静态文件\nhexo g \n\nvi _config.yml\n \n把最下面一行改为其中gname是你github上的名字\n\n` deploy:\n   type: git\n   repo: https://github.com/gname/gname.github.io.git\n   branch: master ` \n\n\n启动服务器 端口号为8090\nhexo s -p 8090\n\n现在浏览器访问`http://localhost:8090/`，就能看到刚才在本地创建的博客了\n```\n\n\n#####部署到github上\n\n创建repository 名字的格式必须为yourgitname.github.io\n\n```\nnpm install hexo-deployer-git --save\n\n//上传到github上\nhexo d \n\n```\n现在浏览yourgitname.github.io,就可以看到你的博客了\n\n\n#####添加多说\n\n```\n#####添加rss\n\n#####添加sitemap\n\n要重启服务器才能生效\n```\n\n","source":"_posts/hexo-note.md","raw":"---\ntitle: hexo 搭建小记\ndate: 2016-07-01 01:19:20\ntags: [hexo,部署]\n---\n#hexo-1\n\n1\\. **安装node**\n\nhero要求node版本大于0.12版本\n\n*[node-v0.12版本列表](http://nodejs.org/dist/latest-v0.12.x/)*\n\n这里选择源码安装:\n\n``` \nwget http://nodejs.org/dist/latest-v0.12.x/node-v0.12.15-linux-x64.tar.xz\n\ntar xvf node-v0.12.15-linux-x64.tar.xz\n\ncd node-v0.12.15/\n\n./configure\n\nmake\n\nmake install\n\n```\n\n添加到环境变量\n\n```\n在PATH后面追加/usr/local/bin/node\n\nvi /etc/profile\n\n使环境变量生效\n\nsource /etc/profile\n\n查看是否在PATH里面\n\necho $PATH\n\nnode -v\n\n显示v0.12.15说明node已经配置成功\n\n```\n\n\n2\\. **安装Hexo3.0**\n\n```\nnpm install hexo-cli -g\n\n```\n\n创建一个存放博客的文件夹\n\n```\nmkdir myblog\n\ncd myblog\n\nhexo 会通过git下载所需要的文件\nhexo init \n\n安装依赖包\nnpm install\n\n生成静态文件\nhexo g \n\nvi _config.yml\n \n把最下面一行改为其中gname是你github上的名字\n\n` deploy:\n   type: git\n   repo: https://github.com/gname/gname.github.io.git\n   branch: master ` \n\n\n启动服务器 端口号为8090\nhexo s -p 8090\n\n现在浏览器访问`http://localhost:8090/`，就能看到刚才在本地创建的博客了\n```\n\n\n#####部署到github上\n\n创建repository 名字的格式必须为yourgitname.github.io\n\n```\nnpm install hexo-deployer-git --save\n\n//上传到github上\nhexo d \n\n```\n现在浏览yourgitname.github.io,就可以看到你的博客了\n\n\n#####添加多说\n\n```\n#####添加rss\n\n#####添加sitemap\n\n要重启服务器才能生效\n```\n\n","slug":"hexo-note","published":1,"updated":"2016-08-20T10:40:00.766Z","_id":"cis3027tw0000ksv7tbl69xgv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>#hexo-1</p>\n<p>1. <strong>安装node</strong></p>\n<p>hero要求node版本大于0.12版本</p>\n<p><em><a href=\"http://nodejs.org/dist/latest-v0.12.x/\" target=\"_blank\" rel=\"external\">node-v0.12版本列表</a></em></p>\n<p>这里选择源码安装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://nodejs.org/dist/latest-v0.12.x/node-v0.12.15-linux-x64.tar.xz</div><div class=\"line\"></div><div class=\"line\">tar xvf node-v0.12.15-linux-x64.tar.xz</div><div class=\"line\"></div><div class=\"line\">cd node-v0.12.15/</div><div class=\"line\"></div><div class=\"line\">./configure</div><div class=\"line\"></div><div class=\"line\">make</div><div class=\"line\"></div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>添加到环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">在PATH后面追加/usr/local/bin/node</div><div class=\"line\"></div><div class=\"line\">vi /etc/profile</div><div class=\"line\"></div><div class=\"line\">使环境变量生效</div><div class=\"line\"></div><div class=\"line\">source /etc/profile</div><div class=\"line\"></div><div class=\"line\">查看是否在PATH里面</div><div class=\"line\"></div><div class=\"line\">echo $PATH</div><div class=\"line\"></div><div class=\"line\">node -v</div><div class=\"line\"></div><div class=\"line\">显示v0.12.15说明node已经配置成功</div></pre></td></tr></table></figure>\n<p>2. <strong>安装Hexo3.0</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>创建一个存放博客的文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir myblog</div><div class=\"line\"></div><div class=\"line\">cd myblog</div><div class=\"line\"></div><div class=\"line\">hexo 会通过git下载所需要的文件</div><div class=\"line\">hexo init </div><div class=\"line\"></div><div class=\"line\">安装依赖包</div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\">生成静态文件</div><div class=\"line\">hexo g </div><div class=\"line\"></div><div class=\"line\">vi _config.yml</div><div class=\"line\"> </div><div class=\"line\">把最下面一行改为其中gname是你github上的名字</div><div class=\"line\"></div><div class=\"line\">` deploy:</div><div class=\"line\">   type: git</div><div class=\"line\">   repo: https://github.com/gname/gname.github.io.git</div><div class=\"line\">   branch: master ` </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">启动服务器 端口号为8090</div><div class=\"line\">hexo s -p 8090</div><div class=\"line\"></div><div class=\"line\">现在浏览器访问`http://localhost:8090/`，就能看到刚才在本地创建的博客了</div></pre></td></tr></table></figure>\n<p>#####部署到github上</p>\n<p>创建repository 名字的格式必须为yourgitname.github.io</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div><div class=\"line\"></div><div class=\"line\">//上传到github上</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>现在浏览yourgitname.github.io,就可以看到你的博客了</p>\n<p>#####添加多说</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#####添加rss</div><div class=\"line\"></div><div class=\"line\">#####添加sitemap</div><div class=\"line\"></div><div class=\"line\">要重启服务器才能生效</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>#hexo-1</p>\n<p>1. <strong>安装node</strong></p>\n<p>hero要求node版本大于0.12版本</p>\n<p><em><a href=\"http://nodejs.org/dist/latest-v0.12.x/\">node-v0.12版本列表</a></em></p>\n<p>这里选择源码安装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://nodejs.org/dist/latest-v0.12.x/node-v0.12.15-linux-x64.tar.xz</div><div class=\"line\"></div><div class=\"line\">tar xvf node-v0.12.15-linux-x64.tar.xz</div><div class=\"line\"></div><div class=\"line\">cd node-v0.12.15/</div><div class=\"line\"></div><div class=\"line\">./configure</div><div class=\"line\"></div><div class=\"line\">make</div><div class=\"line\"></div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>添加到环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">在PATH后面追加/usr/local/bin/node</div><div class=\"line\"></div><div class=\"line\">vi /etc/profile</div><div class=\"line\"></div><div class=\"line\">使环境变量生效</div><div class=\"line\"></div><div class=\"line\">source /etc/profile</div><div class=\"line\"></div><div class=\"line\">查看是否在PATH里面</div><div class=\"line\"></div><div class=\"line\">echo $PATH</div><div class=\"line\"></div><div class=\"line\">node -v</div><div class=\"line\"></div><div class=\"line\">显示v0.12.15说明node已经配置成功</div></pre></td></tr></table></figure>\n<p>2. <strong>安装Hexo3.0</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>创建一个存放博客的文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir myblog</div><div class=\"line\"></div><div class=\"line\">cd myblog</div><div class=\"line\"></div><div class=\"line\">hexo 会通过git下载所需要的文件</div><div class=\"line\">hexo init </div><div class=\"line\"></div><div class=\"line\">安装依赖包</div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\">生成静态文件</div><div class=\"line\">hexo g </div><div class=\"line\"></div><div class=\"line\">vi _config.yml</div><div class=\"line\"> </div><div class=\"line\">把最下面一行改为其中gname是你github上的名字</div><div class=\"line\"></div><div class=\"line\">` deploy:</div><div class=\"line\">   type: git</div><div class=\"line\">   repo: https://github.com/gname/gname.github.io.git</div><div class=\"line\">   branch: master ` </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">启动服务器 端口号为8090</div><div class=\"line\">hexo s -p 8090</div><div class=\"line\"></div><div class=\"line\">现在浏览器访问`http://localhost:8090/`，就能看到刚才在本地创建的博客了</div></pre></td></tr></table></figure>\n<p>#####部署到github上</p>\n<p>创建repository 名字的格式必须为yourgitname.github.io</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div><div class=\"line\"></div><div class=\"line\">//上传到github上</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>现在浏览yourgitname.github.io,就可以看到你的博客了</p>\n<p>#####添加多说</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#####添加rss</div><div class=\"line\"></div><div class=\"line\">#####添加sitemap</div><div class=\"line\"></div><div class=\"line\">要重启服务器才能生效</div></pre></td></tr></table></figure>\n"},{"title":"javascript中静态方法、实例方法、内部方法和原型的一点见解","date":"2016-07-18T14:09:28.000Z","_content":"###1、静态方法的定义\n\n\n```\nvar BaseClass = function() {}; // var BaseClass=new Function();  \nBaseClass.f1 = function(){//定义静态方法  \n     alert(' This is a static method ');  \n}  \nBaseClass.f1();//This is a static method  \nvar instance1 = new BaseClass();  \ninstance1.f1();//instance1.f1 is not a function  \n```\n由以上代码分析可知，静态方法不能被实例对象调用，再看以下代码\n\n```\nvar BaseClass = new Function;  \nvar Class2 = BaseClass;  \nBaseClass.f1 = function(){  \nalert(\"BaseClass ' s static method\");  \n}  \nClass2.f2 = function(){  \nalert(\"Class2 ' s static method\");  \n}  \nBaseClass.f1();//BaseClass ' s static method  \nBaseClass.f2();//Class2 ' s static method  \nClass2.f1();//BaseClass ' s static method  \nClass2.f2();//Class2 ' s static method  \n```\n 从运行结果来看，BaseClass和Class都有f1和f2静态方法，实际上这两个函数是一样的，可以执行以下代码来验证\n \n `alert(BaseClass == Class2);//true `\n \n 如果删除其中一个函数中的静态方法，则对应的另一个函数的静态方法也被删除，比如执行\n \n ``\n delete Class2.f2;  \n ``\n 同时也会删除BaseClass中的f2\n \n###2、实例方法的定义\n 这里是利用JavaScript对象原型引用prototype来实现的，看以下代码\n \n ```\n  var BaseClass = function() {};  \nBaseClass.prototype.method1 = function(){  \n      alert(' This is a instance method ');  \n}  \nvar instance1 = new BaseClass();  \ninstance1.method1();//This is a instance method  \n ```\n method1即为通过prototype原型引用定义的实例方法，这里也可以在实例上直接定义方法（变量），看以下代码\n \n ```\n var BaseClass = function() {};  \nvar instance1 = new BaseClass();  \ninstance1.method1 = function(){  \n    alert(' This is a instance method too ');  \n}   \ninstance1.method1();//This is a instance method too  \n ```\n 下面介绍通过this指针来定义实例方法（变量），看以下代码\n \n ```\n var BaseClass = function() {  \n this.method1 = function(){  \n   alert(' Defined by the \"this\" instance method');  \n }  \n};  \nvar instance1 = new BaseClass();  \ninstance1.method1();//Defined by the \"this\" instance method  \n ```\n 那么同时在实例上、原型引用上和“this”上定义了相同名字的实例方法后，实例会优先调用那一个呢？请看以下代码\n \n ```\n var BaseClass = function() {  \nthis.method1 = function(){  \n       alert(' Defined by the \"this\" in the instance method');  \n }  \n};  \nvar instance1 = new BaseClass();  \ninstance1.method1 = function(){  \n    alert(' Defined directly in the instance method');  \n}  \nBaseClass.prototype.method1 = function(){  \n    alert(' Defined by the prototype instance method ');  \n}  \ninstance1.method1();//Defined directly in the instance method \n ```\n \n 通过运行结果跟踪测试可以看出直接定义在实例上的变量的优先级要高于定义在“this”上的，而定义在“this”上的又高于 prototype定义的变量。即直接定义在实例上的变量会覆盖定义在“this”上和prototype定义的变量，定义在“this”上的会覆盖prototype定义的变量。\n \n \n###3、内部方法\n先看以下定义\n\n```\nvar BaseClass = function() {  \n    var method1 = function() {  \n        alert(\"Internal method\");  \n    };  \n    var method2 = function() {  \n        alert(\"call Internal method\");  \n        method1();  \n    };  \n    this.method3 = function(){  \n        method2();  \n    }  \n};  \nvar instance1 = new BaseClass();  \ninstance1.method1();// 会报错，因为method1是BaseClass中定义的内部变量，作用域只有在内部可见（闭包）  \ninstance1.method3();//会先后调用method2和method1 \n```\n\n[原文链接](hhttp://blog.csdn.net/jerrysbest/article/details/6642003)\n","source":"_posts/javascipt-static-instance-method.md","raw":"---\ntitle:  javascript中静态方法、实例方法、内部方法和原型的一点见解\ndate: 2016-07-18 22:09:28\ntags: javascript\n---\n###1、静态方法的定义\n\n\n```\nvar BaseClass = function() {}; // var BaseClass=new Function();  \nBaseClass.f1 = function(){//定义静态方法  \n     alert(' This is a static method ');  \n}  \nBaseClass.f1();//This is a static method  \nvar instance1 = new BaseClass();  \ninstance1.f1();//instance1.f1 is not a function  \n```\n由以上代码分析可知，静态方法不能被实例对象调用，再看以下代码\n\n```\nvar BaseClass = new Function;  \nvar Class2 = BaseClass;  \nBaseClass.f1 = function(){  \nalert(\"BaseClass ' s static method\");  \n}  \nClass2.f2 = function(){  \nalert(\"Class2 ' s static method\");  \n}  \nBaseClass.f1();//BaseClass ' s static method  \nBaseClass.f2();//Class2 ' s static method  \nClass2.f1();//BaseClass ' s static method  \nClass2.f2();//Class2 ' s static method  \n```\n 从运行结果来看，BaseClass和Class都有f1和f2静态方法，实际上这两个函数是一样的，可以执行以下代码来验证\n \n `alert(BaseClass == Class2);//true `\n \n 如果删除其中一个函数中的静态方法，则对应的另一个函数的静态方法也被删除，比如执行\n \n ``\n delete Class2.f2;  \n ``\n 同时也会删除BaseClass中的f2\n \n###2、实例方法的定义\n 这里是利用JavaScript对象原型引用prototype来实现的，看以下代码\n \n ```\n  var BaseClass = function() {};  \nBaseClass.prototype.method1 = function(){  \n      alert(' This is a instance method ');  \n}  \nvar instance1 = new BaseClass();  \ninstance1.method1();//This is a instance method  \n ```\n method1即为通过prototype原型引用定义的实例方法，这里也可以在实例上直接定义方法（变量），看以下代码\n \n ```\n var BaseClass = function() {};  \nvar instance1 = new BaseClass();  \ninstance1.method1 = function(){  \n    alert(' This is a instance method too ');  \n}   \ninstance1.method1();//This is a instance method too  \n ```\n 下面介绍通过this指针来定义实例方法（变量），看以下代码\n \n ```\n var BaseClass = function() {  \n this.method1 = function(){  \n   alert(' Defined by the \"this\" instance method');  \n }  \n};  \nvar instance1 = new BaseClass();  \ninstance1.method1();//Defined by the \"this\" instance method  \n ```\n 那么同时在实例上、原型引用上和“this”上定义了相同名字的实例方法后，实例会优先调用那一个呢？请看以下代码\n \n ```\n var BaseClass = function() {  \nthis.method1 = function(){  \n       alert(' Defined by the \"this\" in the instance method');  \n }  \n};  \nvar instance1 = new BaseClass();  \ninstance1.method1 = function(){  \n    alert(' Defined directly in the instance method');  \n}  \nBaseClass.prototype.method1 = function(){  \n    alert(' Defined by the prototype instance method ');  \n}  \ninstance1.method1();//Defined directly in the instance method \n ```\n \n 通过运行结果跟踪测试可以看出直接定义在实例上的变量的优先级要高于定义在“this”上的，而定义在“this”上的又高于 prototype定义的变量。即直接定义在实例上的变量会覆盖定义在“this”上和prototype定义的变量，定义在“this”上的会覆盖prototype定义的变量。\n \n \n###3、内部方法\n先看以下定义\n\n```\nvar BaseClass = function() {  \n    var method1 = function() {  \n        alert(\"Internal method\");  \n    };  \n    var method2 = function() {  \n        alert(\"call Internal method\");  \n        method1();  \n    };  \n    this.method3 = function(){  \n        method2();  \n    }  \n};  \nvar instance1 = new BaseClass();  \ninstance1.method1();// 会报错，因为method1是BaseClass中定义的内部变量，作用域只有在内部可见（闭包）  \ninstance1.method3();//会先后调用method2和method1 \n```\n\n[原文链接](hhttp://blog.csdn.net/jerrysbest/article/details/6642003)\n","slug":"javascipt-static-instance-method","published":1,"updated":"2016-08-20T10:40:00.766Z","_id":"cis3027u90001ksv78w78ii16","comments":1,"layout":"post","photos":[],"link":"","content":"<p>###1、静态方法的定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var BaseClass = function() &#123;&#125;; // var BaseClass=new Function();  </div><div class=\"line\">BaseClass.f1 = function()&#123;//定义静态方法  </div><div class=\"line\">     alert(&apos; This is a static method &apos;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">BaseClass.f1();//This is a static method  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.f1();//instance1.f1 is not a function</div></pre></td></tr></table></figure>\n<p>由以上代码分析可知，静态方法不能被实例对象调用，再看以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var BaseClass = new Function;  </div><div class=\"line\">var Class2 = BaseClass;  </div><div class=\"line\">BaseClass.f1 = function()&#123;  </div><div class=\"line\">alert(&quot;BaseClass &apos; s static method&quot;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">Class2.f2 = function()&#123;  </div><div class=\"line\">alert(&quot;Class2 &apos; s static method&quot;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">BaseClass.f1();//BaseClass &apos; s static method  </div><div class=\"line\">BaseClass.f2();//Class2 &apos; s static method  </div><div class=\"line\">Class2.f1();//BaseClass &apos; s static method  </div><div class=\"line\">Class2.f2();//Class2 &apos; s static method</div></pre></td></tr></table></figure>\n<p> 从运行结果来看，BaseClass和Class都有f1和f2静态方法，实际上这两个函数是一样的，可以执行以下代码来验证</p>\n<p> <code>alert(BaseClass == Class2);//true</code></p>\n<p> 如果删除其中一个函数中的静态方法，则对应的另一个函数的静态方法也被删除，比如执行</p>\n<p> <code>delete Class2.f2;</code><br> 同时也会删除BaseClass中的f2</p>\n<p>###2、实例方法的定义<br> 这里是利用JavaScript对象原型引用prototype来实现的，看以下代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  var BaseClass = function() &#123;&#125;;  </div><div class=\"line\">BaseClass.prototype.method1 = function()&#123;  </div><div class=\"line\">      alert(&apos; This is a instance method &apos;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1();//This is a instance method</div></pre></td></tr></table></figure>\n<p> method1即为通过prototype原型引用定义的实例方法，这里也可以在实例上直接定义方法（变量），看以下代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var BaseClass = function() &#123;&#125;;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1 = function()&#123;  </div><div class=\"line\">    alert(&apos; This is a instance method too &apos;);  </div><div class=\"line\">&#125;   </div><div class=\"line\">instance1.method1();//This is a instance method too</div></pre></td></tr></table></figure>\n<p> 下面介绍通过this指针来定义实例方法（变量），看以下代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var BaseClass = function() &#123;  </div><div class=\"line\"> this.method1 = function()&#123;  </div><div class=\"line\">   alert(&apos; Defined by the &quot;this&quot; instance method&apos;);  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1();//Defined by the &quot;this&quot; instance method</div></pre></td></tr></table></figure>\n<p> 那么同时在实例上、原型引用上和“this”上定义了相同名字的实例方法后，实例会优先调用那一个呢？请看以下代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var BaseClass = function() &#123;  </div><div class=\"line\">this.method1 = function()&#123;  </div><div class=\"line\">       alert(&apos; Defined by the &quot;this&quot; in the instance method&apos;);  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1 = function()&#123;  </div><div class=\"line\">    alert(&apos; Defined directly in the instance method&apos;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">BaseClass.prototype.method1 = function()&#123;  </div><div class=\"line\">    alert(&apos; Defined by the prototype instance method &apos;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">instance1.method1();//Defined directly in the instance method</div></pre></td></tr></table></figure>\n<p> 通过运行结果跟踪测试可以看出直接定义在实例上的变量的优先级要高于定义在“this”上的，而定义在“this”上的又高于 prototype定义的变量。即直接定义在实例上的变量会覆盖定义在“this”上和prototype定义的变量，定义在“this”上的会覆盖prototype定义的变量。</p>\n<p>###3、内部方法<br>先看以下定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var BaseClass = function() &#123;  </div><div class=\"line\">    var method1 = function() &#123;  </div><div class=\"line\">        alert(&quot;Internal method&quot;);  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">    var method2 = function() &#123;  </div><div class=\"line\">        alert(&quot;call Internal method&quot;);  </div><div class=\"line\">        method1();  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">    this.method3 = function()&#123;  </div><div class=\"line\">        method2();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1();// 会报错，因为method1是BaseClass中定义的内部变量，作用域只有在内部可见（闭包）  </div><div class=\"line\">instance1.method3();//会先后调用method2和method1</div></pre></td></tr></table></figure>\n<p><a href=\"hhttp://blog.csdn.net/jerrysbest/article/details/6642003\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n","excerpt":"","more":"<p>###1、静态方法的定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var BaseClass = function() &#123;&#125;; // var BaseClass=new Function();  </div><div class=\"line\">BaseClass.f1 = function()&#123;//定义静态方法  </div><div class=\"line\">     alert(&apos; This is a static method &apos;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">BaseClass.f1();//This is a static method  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.f1();//instance1.f1 is not a function</div></pre></td></tr></table></figure>\n<p>由以上代码分析可知，静态方法不能被实例对象调用，再看以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var BaseClass = new Function;  </div><div class=\"line\">var Class2 = BaseClass;  </div><div class=\"line\">BaseClass.f1 = function()&#123;  </div><div class=\"line\">alert(&quot;BaseClass &apos; s static method&quot;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">Class2.f2 = function()&#123;  </div><div class=\"line\">alert(&quot;Class2 &apos; s static method&quot;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">BaseClass.f1();//BaseClass &apos; s static method  </div><div class=\"line\">BaseClass.f2();//Class2 &apos; s static method  </div><div class=\"line\">Class2.f1();//BaseClass &apos; s static method  </div><div class=\"line\">Class2.f2();//Class2 &apos; s static method</div></pre></td></tr></table></figure>\n<p> 从运行结果来看，BaseClass和Class都有f1和f2静态方法，实际上这两个函数是一样的，可以执行以下代码来验证</p>\n<p> <code>alert(BaseClass == Class2);//true</code></p>\n<p> 如果删除其中一个函数中的静态方法，则对应的另一个函数的静态方法也被删除，比如执行</p>\n<p> <code>delete Class2.f2;</code><br> 同时也会删除BaseClass中的f2</p>\n<p>###2、实例方法的定义<br> 这里是利用JavaScript对象原型引用prototype来实现的，看以下代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  var BaseClass = function() &#123;&#125;;  </div><div class=\"line\">BaseClass.prototype.method1 = function()&#123;  </div><div class=\"line\">      alert(&apos; This is a instance method &apos;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1();//This is a instance method</div></pre></td></tr></table></figure>\n<p> method1即为通过prototype原型引用定义的实例方法，这里也可以在实例上直接定义方法（变量），看以下代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var BaseClass = function() &#123;&#125;;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1 = function()&#123;  </div><div class=\"line\">    alert(&apos; This is a instance method too &apos;);  </div><div class=\"line\">&#125;   </div><div class=\"line\">instance1.method1();//This is a instance method too</div></pre></td></tr></table></figure>\n<p> 下面介绍通过this指针来定义实例方法（变量），看以下代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var BaseClass = function() &#123;  </div><div class=\"line\"> this.method1 = function()&#123;  </div><div class=\"line\">   alert(&apos; Defined by the &quot;this&quot; instance method&apos;);  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1();//Defined by the &quot;this&quot; instance method</div></pre></td></tr></table></figure>\n<p> 那么同时在实例上、原型引用上和“this”上定义了相同名字的实例方法后，实例会优先调用那一个呢？请看以下代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var BaseClass = function() &#123;  </div><div class=\"line\">this.method1 = function()&#123;  </div><div class=\"line\">       alert(&apos; Defined by the &quot;this&quot; in the instance method&apos;);  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1 = function()&#123;  </div><div class=\"line\">    alert(&apos; Defined directly in the instance method&apos;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">BaseClass.prototype.method1 = function()&#123;  </div><div class=\"line\">    alert(&apos; Defined by the prototype instance method &apos;);  </div><div class=\"line\">&#125;  </div><div class=\"line\">instance1.method1();//Defined directly in the instance method</div></pre></td></tr></table></figure>\n<p> 通过运行结果跟踪测试可以看出直接定义在实例上的变量的优先级要高于定义在“this”上的，而定义在“this”上的又高于 prototype定义的变量。即直接定义在实例上的变量会覆盖定义在“this”上和prototype定义的变量，定义在“this”上的会覆盖prototype定义的变量。</p>\n<p>###3、内部方法<br>先看以下定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var BaseClass = function() &#123;  </div><div class=\"line\">    var method1 = function() &#123;  </div><div class=\"line\">        alert(&quot;Internal method&quot;);  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">    var method2 = function() &#123;  </div><div class=\"line\">        alert(&quot;call Internal method&quot;);  </div><div class=\"line\">        method1();  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">    this.method3 = function()&#123;  </div><div class=\"line\">        method2();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">var instance1 = new BaseClass();  </div><div class=\"line\">instance1.method1();// 会报错，因为method1是BaseClass中定义的内部变量，作用域只有在内部可见（闭包）  </div><div class=\"line\">instance1.method3();//会先后调用method2和method1</div></pre></td></tr></table></figure>\n<p><a href=\"hhttp://blog.csdn.net/jerrysbest/article/details/6642003\">原文链接</a></p>\n"},{"title":"lovelyhouese","date":"2016-06-30T15:38:01.000Z","_content":"\n\n###歌曲名称:小屋### \n* 歌手:`赵雷`\n\n* 专辑:`吉姆餐厅`\n\n* 小屋 `赵雷`\n\n* 词：`赵雷`\n\n* 曲：`赵雷`\n\n*嘿 我的小屋*\n\n*我的小屋*\n\n*不贵的房租*\n\n*柜子上面摆着很多电影和书*\n\n*我的小屋 在星星下面*\n\n*在城市的楼群之间*\n\n---\n\n[我的小屋](www.baidu.com)\n\n*门外有棵树*\n\n> 风儿吹着树叶敲打我的窗户\n\n>> 我的小屋 如果我要离开\n>>> 请你不要哭\n\n**我的小屋 我喜欢给你唱歌**\n\n***我喜欢坐在门外看日落日出***\n\n* 我的小屋 我可以光着屁股 \n* 让你看到我的肌肉和肋骨\n\n我的小屋 不用和他们一样\n--------\n累的时候我不用去故作笑容\n==\n######我的小屋 黑夜里的眼睛\n\n>#####望着我的全部\n\n* 我的小屋 已经上了岁数\n* <br>你可知道</br> \n*  \n*<p>门上的油漆已经看不清楚</p>*\n\n* 小屋你可感到 我来去的脚步\n\nworkhard :\n\tmake more money\nhard workd :\n\tdo what i want\n\n```\n","source":"_posts/lovelyhouese.md","raw":"---\ntitle: lovelyhouese\ndate: 2016-06-30 23:38:01\ntags:\n---\n\n\n###歌曲名称:小屋### \n* 歌手:`赵雷`\n\n* 专辑:`吉姆餐厅`\n\n* 小屋 `赵雷`\n\n* 词：`赵雷`\n\n* 曲：`赵雷`\n\n*嘿 我的小屋*\n\n*我的小屋*\n\n*不贵的房租*\n\n*柜子上面摆着很多电影和书*\n\n*我的小屋 在星星下面*\n\n*在城市的楼群之间*\n\n---\n\n[我的小屋](www.baidu.com)\n\n*门外有棵树*\n\n> 风儿吹着树叶敲打我的窗户\n\n>> 我的小屋 如果我要离开\n>>> 请你不要哭\n\n**我的小屋 我喜欢给你唱歌**\n\n***我喜欢坐在门外看日落日出***\n\n* 我的小屋 我可以光着屁股 \n* 让你看到我的肌肉和肋骨\n\n我的小屋 不用和他们一样\n--------\n累的时候我不用去故作笑容\n==\n######我的小屋 黑夜里的眼睛\n\n>#####望着我的全部\n\n* 我的小屋 已经上了岁数\n* <br>你可知道</br> \n*  \n*<p>门上的油漆已经看不清楚</p>*\n\n* 小屋你可感到 我来去的脚步\n\nworkhard :\n\tmake more money\nhard workd :\n\tdo what i want\n\n```\n","slug":"lovelyhouese","published":1,"updated":"2016-08-20T10:40:00.766Z","_id":"cis3027uj0003ksv7brsd873v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>###歌曲名称:小屋### </p>\n<ul>\n<li><p>歌手:<code>赵雷</code></p>\n</li>\n<li><p>专辑:<code>吉姆餐厅</code></p>\n</li>\n<li><p>小屋 <code>赵雷</code></p>\n</li>\n<li><p>词：<code>赵雷</code></p>\n</li>\n<li><p>曲：<code>赵雷</code></p>\n</li>\n</ul>\n<p><em>嘿 我的小屋</em></p>\n<p><em>我的小屋</em></p>\n<p><em>不贵的房租</em></p>\n<p><em>柜子上面摆着很多电影和书</em></p>\n<p><em>我的小屋 在星星下面</em></p>\n<p><em>在城市的楼群之间</em></p>\n<hr>\n<p><a href=\"www.baidu.com\">我的小屋</a></p>\n<p><em>门外有棵树</em></p>\n<blockquote>\n<p>风儿吹着树叶敲打我的窗户</p>\n<blockquote>\n<p>我的小屋 如果我要离开</p>\n<blockquote>\n<p>请你不要哭</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><strong>我的小屋 我喜欢给你唱歌</strong></p>\n<p><strong><em>我喜欢坐在门外看日落日出</em></strong></p>\n<ul>\n<li>我的小屋 我可以光着屁股 </li>\n<li>让你看到我的肌肉和肋骨</li>\n</ul>\n<h2 id=\"我的小屋-不用和他们一样\"><a href=\"#我的小屋-不用和他们一样\" class=\"headerlink\" title=\"我的小屋 不用和他们一样\"></a>我的小屋 不用和他们一样</h2><h1 id=\"累的时候我不用去故作笑容\"><a href=\"#累的时候我不用去故作笑容\" class=\"headerlink\" title=\"累的时候我不用去故作笑容\"></a>累的时候我不用去故作笑容</h1><p>######我的小屋 黑夜里的眼睛</p>\n<blockquote>\n<p>#####望着我的全部</p>\n</blockquote>\n<ul>\n<li>我的小屋 已经上了岁数</li>\n<li><br>你可知道<br> </li>\n<li><p><em><p>门上的油漆已经看不清楚</p></em></p>\n</li>\n<li><p>小屋你可感到 我来去的脚步</p>\n</li>\n</ul>\n<p>workhard :<br>    make more money<br>hard workd :<br>    do what i want</p>\n<p>```</p>\n","excerpt":"","more":"<p>###歌曲名称:小屋### </p>\n<ul>\n<li><p>歌手:<code>赵雷</code></p>\n</li>\n<li><p>专辑:<code>吉姆餐厅</code></p>\n</li>\n<li><p>小屋 <code>赵雷</code></p>\n</li>\n<li><p>词：<code>赵雷</code></p>\n</li>\n<li><p>曲：<code>赵雷</code></p>\n</li>\n</ul>\n<p><em>嘿 我的小屋</em></p>\n<p><em>我的小屋</em></p>\n<p><em>不贵的房租</em></p>\n<p><em>柜子上面摆着很多电影和书</em></p>\n<p><em>我的小屋 在星星下面</em></p>\n<p><em>在城市的楼群之间</em></p>\n<hr>\n<p><a href=\"www.baidu.com\">我的小屋</a></p>\n<p><em>门外有棵树</em></p>\n<blockquote>\n<p>风儿吹着树叶敲打我的窗户</p>\n<blockquote>\n<p>我的小屋 如果我要离开</p>\n<blockquote>\n<p>请你不要哭</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><strong>我的小屋 我喜欢给你唱歌</strong></p>\n<p><strong><em>我喜欢坐在门外看日落日出</em></strong></p>\n<ul>\n<li>我的小屋 我可以光着屁股 </li>\n<li>让你看到我的肌肉和肋骨</li>\n</ul>\n<h2 id=\"我的小屋-不用和他们一样\"><a href=\"#我的小屋-不用和他们一样\" class=\"headerlink\" title=\"我的小屋 不用和他们一样\"></a>我的小屋 不用和他们一样</h2><h1 id=\"累的时候我不用去故作笑容\"><a href=\"#累的时候我不用去故作笑容\" class=\"headerlink\" title=\"累的时候我不用去故作笑容\"></a>累的时候我不用去故作笑容</h1><p>######我的小屋 黑夜里的眼睛</p>\n<blockquote>\n<p>#####望着我的全部</p>\n</blockquote>\n<ul>\n<li>我的小屋 已经上了岁数</li>\n<li><br>你可知道</br> </li>\n<li><p><em><p>门上的油漆已经看不清楚</p></em></p>\n</li>\n<li><p>小屋你可感到 我来去的脚步</p>\n</li>\n</ul>\n<p>workhard :<br>    make more money<br>hard workd :<br>    do what i want</p>\n<p>```</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-08-20T10:40:00.766Z","updated":"2016-08-20T10:40:00.766Z","_id":"cis3027un0004ksv7p84hxlyp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"node.js exprots","date":"2016-08-20T10:47:27.000Z","_content":"","source":"_posts/node-js-exprots.md","raw":"---\ntitle: node.js exprots\ndate: 2016-08-20 18:47:27\ntags:\n---\n","slug":"node-js-exprots","published":1,"updated":"2016-08-20T10:47:27.355Z","_id":"cis3298550000fov78c127lnv","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cis3027u90001ksv78w78ii16","tag_id":"cis3027ux0006ksv7lmze75qe","_id":"cis3027uy0009ksv703yzywoc"},{"post_id":"cis3027tw0000ksv7tbl69xgv","tag_id":"cis3027uf0002ksv7ksbx4789","_id":"cis30ndbk0000vav7rxxx8cqv"},{"post_id":"cis3027tw0000ksv7tbl69xgv","tag_id":"cis3027uw0005ksv716hi69fx","_id":"cis30ndbp0001vav7ki6aq0jo"}],"Tag":[{"name":"hexo","_id":"cis3027uf0002ksv7ksbx4789"},{"name":"部署","_id":"cis3027uw0005ksv716hi69fx"},{"name":"javascript","_id":"cis3027ux0006ksv7lmze75qe"},{"name":"exports","_id":"cis31kso40000w8v7zq8nfl9q"},{"name":"module.exports","_id":"cis31kso50001w8v7ushl189g"},{"name":"Node.js","_id":"cis31kso60002w8v78v5yy46z"}]}}